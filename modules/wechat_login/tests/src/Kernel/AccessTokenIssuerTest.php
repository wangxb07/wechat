<?php


namespace Drupal\Tests\wechat_login\Kernel;

use Drupal\consumers\Entity\Consumer;
use Drupal\KernelTests\KernelTestBase;
use Drupal\simple_oauth\Entities\RefreshTokenEntity;
use Drupal\wechat_login\AccessTokenIssuer;
use League\OAuth2\Server\Entities\ClientEntityInterface;
use League\OAuth2\Server\Entities\RefreshTokenEntityInterface;
use Symfony\Component\DependencyInjection\Definition;

class AccessTokenIssuerTest extends KernelTestBase {
  /**
   * Modules to enable.
   *
   * @var array
   */
  public static $modules = [
    'wechat_login',
    'simple_oauth',
    'user',
    'serialization',
    'consumers',
    'image',
    'file'
  ];

  /**
   * A user with permission to administer site configuration.
   *
   * @var \Drupal\user\UserInterface
   */
  protected $user;

  public function setUp() {
    parent::setUp(); // TODO: Change the autogenerated stub

    $this->installEntitySchema('consumer');
    $this->installEntitySchema('user');
    $this->installEntitySchema('oauth2_token');
    $this->installEntitySchema('file');

    $this->installConfig('simple_oauth');

    $consumer = Consumer::create([
      'label' => 'Test consumer',
      'description' => 'Consumer for test',
      'third_party' => false,
      'is_default' => true,
    ]);

    $consumer->save();
  }

  public function testIssueAccessToken() {
    /** @var Definition $issuerDefinition */
    $issuerDefinition = $this->container->getDefinition('wechat_login.access_token_issuer');

    $this->assertIsObject($issuerDefinition, "issuer not a object");
    $this->assertTrue(($issuerDefinition->getClass() == 'Drupal\\wechat_login\\AccessTokenIssuer'), 'access token issuer is not instance of AccessTokenIssuer');

    /** @var AccessTokenIssuer $issuer */
    $issuer = $this->container->get('wechat_login.access_token_issuer');

    /** @var ClientEntityInterface $consumer */
    $consumer = $issuer->loadDefaultClient();
    $this->assertNotEmpty($consumer, 'default client is empty');

    $token = $issuer->issueAccessToken("10", []);
    $this->assertTrue(get_class($token) == 'Drupal\simple_oauth\Entities\AccessTokenEntity', 'token not right');

    $this->assertEqual($token->getClient()->getIdentifier(), $consumer->getIdentifier(), 'client identifier be changed');
    $this->assertEqual($token->getUserIdentifier(), "10", 'user identifier be changed');

    $now = new \DateTime();
    $this->assertNotFalse($token->getExpiryDateTime()->diff($now), 'expiry datetime is invalid');

    // 来自默认设置，默认设置为5分钟，加上运行延时，为4分钟59秒
    $this->assertEqual($token->getExpiryDateTime()->diff($now)->i, 4, 'expiry datetime not matched with settings');
  }

  public function testIssueRefreshToken() {
    /** @var AccessTokenIssuer $issuer */
    $issuer = $this->container->get('wechat_login.access_token_issuer');
    $token = $issuer->issueAccessToken("10", []);

    /** @var RefreshTokenEntityInterface $refreshToken */
    $refreshToken = $issuer->issueRefreshToken($token);

    $this->assertNotNull($refreshToken, 'refresh token is null');
    $this->assertEqual($refreshToken->getAccessToken(), $token, 'the access token not matched');

    $now = new \DateTime();
    $this->assertNotFalse($refreshToken->getExpiryDateTime()->diff($now), 'expiry datetime is invalid');
    // 来自默认设置，默认设置为14d，加上运行延时，为13d23H59I59S
    $this->assertEqual($refreshToken->getExpiryDateTime()->diff($now)->d, 13, 'expiry d of datetime not matched with settings');
    $this->assertEqual($refreshToken->getExpiryDateTime()->diff($now)->h, 23, 'expiry h of datetime not matched with settings');
    $this->assertEqual($refreshToken->getExpiryDateTime()->diff($now)->i, 59, 'expiry i of datetime not matched with settings');
  }
}